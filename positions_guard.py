import os
import argparse
import tempfile
from contextlib import contextmanager
from datetime import datetime, timezone

from core.env_loader import load_and_check_env
from core.bybit_exchange import normalize_symbol
from core.market_info import (
    get_balance, get_symbol_price,
    get_open_orders, cancel_open_orders, has_open_position
)
from core.predict import predict_trend, train_model_for_pair
from position_manager import open_position

@contextmanager
def single_instance_lock(name: str = "positions_guard.lock"):
    path = os.path.join(tempfile.gettempdir(), name)
    if os.path.exists(path):
        raise RuntimeError(f"Already running: {path}")
    try:
        open(path, "w").close()
        yield
    finally:
        try:
            os.remove(path)
        except Exception:
            pass

def ensure_models_exist(pairs, timeframe="15m", limit=2000, model_dir="models"):
    os.makedirs(model_dir, exist_ok=True)
    missing = []
    for p in pairs:
        key = normalize_symbol(p).upper().replace("/", "").replace(":USDT", "")
        mpath = os.path.join(model_dir, f"model_{key}.pkl")
        if not os.path.exists(mpath):
            missing.append(p)
    if missing:
        print(f"üß† –ù–µ—Ç –º–æ–¥–µ–ª–µ–π –¥–ª—è: {missing} ‚Äî –æ–±—É—á–∞–µ–º...")
        for p in missing:
            try:
                train_model_for_pair(p, timeframe=timeframe, limit=limit, model_dir=model_dir)
            except Exception as e:
                print(f"‚ö†Ô∏è {p}: {e}")

def main():
    load_and_check_env()

    parser = argparse.ArgumentParser()
    parser.add_argument("--pair", type=str)
    parser.add_argument("--threshold", type=float, default=float(os.getenv("CONF_THRESHOLD", "0.65")))
    parser.add_argument("--timeframe", type=str, default=os.getenv("TIMEFRAME", "5m"))
    parser.add_argument("--limit", type=int, default=int(os.getenv("TRAIN_LIMIT", "3000")))
    parser.add_argument("--live", action="store_true", help="–†–∞–∑—Ä–µ—à–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏")
    parser.add_argument("--autotrain", action="store_true", help="–û–±—É—á–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º")
    parser.add_argument("--auto-cancel", action="store_true", help="–ê–≤—Ç–æ–æ—Ç–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º")
    parser.add_argument("--no-pyramid", action="store_true", help="–ù–µ –≤—Ö–æ–¥–∏—Ç—å, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è")
    args = parser.parse_args()

    pairs = [args.pair] if args.pair else [s.strip() for s in os.getenv("PAIRS","").split(",") if s.strip()]
    if not pairs:
        raise ValueError("PAIRS –ø—É—Å—Ç ‚Äî –∑–∞–ø–æ–ª–Ω–∏ –≤ .env")

    # –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª–∏ –∏–∑ .env (—Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏)
    min_balance = float(os.getenv("MIN_BALANCE_USDT", "5"))  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞
    dry_run = not args.live

    print("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Kolopovstrategy guard ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
    print("‚è± ", datetime.now(timezone.utc).isoformat())
    print(f"Mode: {'LIVE' if not dry_run else 'DRY'} | Threshold={args.threshold}")
    print("üìà Pairs:", ", ".join(pairs))

    if args.autotrain:
        ensure_models_exist(pairs, timeframe=args.timeframe, limit=args.limit)

    with single_instance_lock():
        print("DEBUG PROXY_URL:", os.getenv("PROXY_URL"))
        usdt = get_balance("USDT")
        print(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: {usdt:.2f}")
        if usdt < min_balance:
            print(f"‚õî –ë–∞–ª–∞–Ω—Å –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞ ({min_balance} USDT) ‚Äî —Ç–æ—Ä–≥–æ–≤–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
            return

        # DRY_RUN –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ‚Äî –¥–≤–æ–π–Ω–æ–π –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å
        if dry_run:
            os.environ["DRY_RUN"] = "1"
        else:
            os.environ.pop("DRY_RUN", None)

        for p in pairs:
            sym = normalize_symbol(p)
            price = get_symbol_price(sym)

            # 1) –ü—Ä–µ–¥‚Äë—á–µ–∫: –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
            opened = get_open_orders(sym)
            if opened:
                print(f"‚è≥ –ï—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ {sym}: {len(opened)}")
                if args.auto_cancel:
                    n = cancel_open_orders(sym)
                    print(f"üßπ –û—Ç–º–µ–Ω–∏–ª {n} –æ—Ä–¥–µ—Ä(–æ–≤).")
                else:
                    print("‚è∏ –ü—Ä–æ–ø—É—Å–∫–∞—é –≤—Ö–æ–¥ (–∑–∞–ø—É—Å—Ç–∏ —Å --auto-cancel, —á—Ç–æ–±—ã —á–∏—Å—Ç–∏—Ç—å —Ö–≤–æ—Å—Ç—ã).")
                    continue

            # 2) –ü—Ä–µ–¥‚Äë—á–µ–∫: –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
            if args.no_pyramid and has_open_position(sym):
                print(f"üèï –£–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –ø–æ {sym} ‚Äî –ø–∏—Ä–∞–º–∏–¥–∏–Ω–≥ –≤—ã–∫–ª—é—á–µ–Ω (--no-pyramid). –ü—Ä–æ–ø—É—Å–∫.")
                continue

            # 3) –ü—Ä–æ–≥–Ω–æ–∑
            pred = predict_trend(sym, timeframe=args.timeframe)
            signal = str(pred.get("signal", "hold")).lower()
            conf = float(pred.get("confidence", 0.0))
            print(f"üîÆ {sym} @ {price:.4f} ‚Üí signal={signal} conf={conf:.2f} proba={pred.get('proba', {})}")

            # 4) –í—Ö–æ–¥
            if dry_run or signal not in ("long", "short") or conf < args.threshold:
                print("‚è∏ –£—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã (–∏–ª–∏ DRY).")
                continue

            res = open_position(sym, side=signal)
            print("üßæ –†–µ–∑—É–ª—å—Ç–∞—Ç:", res)

if __name__ == "__main__":
    main()
