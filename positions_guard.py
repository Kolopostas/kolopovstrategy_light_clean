# positions_guard.py
import os
import sys
import time
from pathlib import Path
from datetime import datetime, timezone, timedelta
import argparse

from core.env_loader import load_and_check_env
from core.predict import predict_trend
from core.time_utils import compare_bybit_time
from core.trade_log import log_trade, should_pause_pair
from core.train_model import train_models
from core.market_info import get_instrument_info, adjust_qty_price, get_available_usdt
from core.env_loader import normalize_symbol
from position_manager import make_session, set_leverage, open_position

SLEEP_SEC_PER_PAIR = int(os.getenv("SLEEP_SEC_PER_PAIR", "2"))

# ---------------- Helpers ----------------
def _model_path(symbol: str) -> Path:
    """./models/model_TONUSDT.pkl"""
    return Path("models") / f"model_{symbol.replace('/','').upper()}.pkl"

def _need_retrain(symbol: str, max_age_days: int) -> bool:
    p = _model_path(symbol)
    if not p.exists():
        return True
    age = datetime.now(timezone.utc) - datetime.fromtimestamp(p.stat().st_mtime, tz=timezone.utc)
    return age > timedelta(days=max_age_days)

def _maybe_retrain(pairs, proxy_url: str):
    auto = str(os.getenv("AUTO_RETRAIN", "true")).lower() in ("1", "true", "yes")
    if not auto:
        print("üîß AUTO_RETRAIN=false ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –∞–≤—Ç–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
        return
    max_age = int(os.getenv("MODEL_MAX_AGE_DAYS", "1"))
    to_train = [s for s in pairs if _need_retrain(s, max_age)]
    if to_train:
        print(f"üîÅ –û–±—É—á–∞—é –º–æ–¥–µ–ª–∏: {to_train}")
        res = train_models(to_train, proxy_url=proxy_url)
        for pair, path, status in res:
            print(f"   ‚Ä¢ {pair}: {status} {path if path else ''}")
    else:
        print("‚úÖ –ú–æ–¥–µ–ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã ‚Äî –æ–±—É—á–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

def _print_header(cfg, pairs):
    mode = "DRY_RUN" if cfg["DRY_RUN"] else "LIVE"
    print("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Kolopovstrategy guard ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
    print(f"‚è±  {datetime.now(timezone.utc).isoformat()}")
    print(f"üõ†  MODE: {mode} | DOMAIN: {cfg['DOMAIN']} | LEV={cfg['LEVERAGE']} | AMOUNT={cfg['AMOUNT']}")
    print(f"üéØ Pairs: {', '.join(pairs)}")
    try:
        delta, srv = compare_bybit_time()
        if delta > 1.0:
            print(f"‚ö†Ô∏è  Time drift ~{delta:.2f}s vs Bybit; —É–≤–µ–ª–∏—á—å RECV_WINDOW (—Å–µ–π—á–∞—Å {cfg['RECV_WINDOW']})")
        else:
            print(f"üïí Bybit time check OK (Œî‚âà{delta:.2f}s)")
    except Exception as e:
        print("‚ö†Ô∏è  Time check failed:", e)
    print("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")

# ---------------- Main cycle ----------------
def run_once(pairs_override=None, skip_train=False):
    cfg = load_and_check_env(required_keys=["BYBIT_API_KEY", "BYBIT_SECRET_KEY"])

    pairs = pairs_override if pairs_override else cfg["PAIRS"]
    if not pairs:
        print("‚ùå –ù–µ—Ç –ø–∞—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (PAIRS –ø—É—Å—Ç).")
        return

    _print_header(cfg, pairs)
    if not skip_train:
        _maybe_retrain(pairs, proxy_url=cfg["PROXY_URL"])

    session = None if cfg["DRY_RUN"] else make_session(cfg["API_KEY"], cfg["API_SECRET"], cfg["DOMAIN"])

    for pair in pairs:
        try:
            if should_pause_pair(pair):
                print(f"‚è∏  –ü—Ä–æ–ø—É—Å–∫ (pause active): {pair}")
                continue

            pred = predict_trend(pair, proxy_url=cfg["PROXY_URL"])
            direction = pred["signal"].lower()
            conf = pred["confidence"]
            lev = pred.get("leverage", cfg["LEVERAGE"])
            last = pred["price"]
            tp = pred["tp"]
            sl = pred["sl"]

            print(f"üìà {pair}: {pred['signal']} conf={conf:.3f} price={last} tp={tp} sl={sl} lev={lev}")

            if cfg["DRY_RUN"]:
                print("üß™ DRY_RUN ‚Äî —Å–¥–µ–ª–∫–∞ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            else:
                # –°—Ç—Ä–∞—Ö–æ–≤–∫–∞: –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –∫–æ–Ω—Ñ–∏–≥–æ–≤—ã–π –ø—Ä–µ–¥–µ–ª –ø–ª–µ—á–∞
                eff_lev = max(1, min(int(lev), int(cfg["LEVERAGE"])))
                set_leverage(session, pair, eff_lev)

            if cfg["DRY_RUN"]:
                print("üß™ DRY_RUN ‚Äî —Å–¥–µ–ª–∫–∞ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            else:
                eff_lev = max(1, min(int(lev), int(cfg["LEVERAGE"])))
                set_leverage(session, pair, eff_lev)

                # --- –ù–æ–≤–æ–µ: –ø–æ–¥—Ç—è–Ω–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏ –ø–æ–¥—Å—Ç—Ä–æ–∏–º qty ---
                info = get_instrument_info(session, normalize_symbol(pair), category="linear")
                qty_planned = float(cfg["AMOUNT"])
                px = float(last)  # –ø–æ —Ä—ã–Ω–∫—É price –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–Ω–∏–º–∞–ª–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º last
                qty_adj, _ = adjust_qty_price(info, qty_planned, px)

                # (–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—É—é –º–∞—Ä–∂—É:)
                # avail = get_available_usdt(session)
                # fee = 0.0006  # –ø—Ä–∏–º–µ—Ä –¥–ª—è taker
                # need = (px * qty_adj) / eff_lev * 1.01 + (px * qty_adj) * fee
                # if avail < need:
                #     # —É–º–µ–Ω—å—à–∞–µ–º qty –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                #     scale = max(0.1, avail / max(need, 1e-9))
                #     qty_adj, _ = adjust_qty_price(info, qty_adj * scale, px)
                #     print(f"‚ö†Ô∏è  –ú–∞–ª–æ USDT: —É–º–µ–Ω—å—à–∞—é qty ‚Üí {qty_adj}")

                resp = open_position(
                    session=session,
                    symbol_pair=pair,
                    direction=direction,
                    qty=qty_adj,                       # <<< –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ qty
                    order_type="Market",
                    recv_window=cfg["RECV_WINDOW"],
                )


                resp = open_position(
                    session=session,
                    symbol_pair=pair,
                    direction=direction,
                    qty=cfg["AMOUNT"],
                    order_type="Market",         # –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –Ω–∞ Limit –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏recv_window=cfg["RECV_WINDOW"],
                )
                ret = resp.get("response", {})
                code = ret.get("retCode")
                msg = ret.get("retMsg")
                if code and code != 0:
                    print(f"‚ùó Bybit retCode={code} msg={msg}")
                else:
                    print("üìù Order OK:", {k: ret[k] for k in ret if k in ("retCode","retMsg")})

            log_trade({
                "ts": datetime.now(timezone.utc).isoformat(),
                "pair": pair,
                "signal": pred["signal"],
                "confidence": f"{conf:.4f}",
                "price": f"{last}",
                "tp": f"{tp}",
                "sl": f"{sl}",
                "dry_run": str(cfg["DRY_RUN"]),
            })
        except KeyboardInterrupt:
            print("‚õî –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return
        except Exception as e:
            print(f"‚ùå {pair}: –æ—à–∏–±–∫–∞ {e}")

        time.sleep(SLEEP_SEC_PER_PAIR)

# ---------------- CLI ----------------
def _parse_args():
    ap = argparse.ArgumentParser(description="Kolopovstrategy position guard")
    ap.add_argument("--pair", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –æ–¥–Ω–æ–π –ø–∞—Ä–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, TON/USDT)")
    ap.add_argument("--no-train", action="store_true", help="–ù–µ –æ–±—É—á–∞—Ç—å –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
    return ap.parse_args()

if __name__ == "__main__":
    args = _parse_args()
    override = [args.pair] if args.pair else None
    run_once(pairs_override=override, skip_train=args.no_train)